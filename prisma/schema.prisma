// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(uuid())
  password      String
  email         String       @unique
  is_enabled    Boolean      @default(true)
  is_admin      Boolean      @default(false)
  is_client     Boolean      @default(false)
  is_driver     Boolean      @default(false)
  is_production Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updateAt      DateTime?
  token         Token[]
  Clients       Client?
  Person        Person?
  Order         Order[]
  OrderBatch    OrderBatch[]
}

model Client {
  id               String             @id
  corporate_name   String
  name_fantasy     String
  cnpj             String             @unique
  county           String?
  district         String?
  ie               String
  uf               String?
  fone             String?            @unique
  address          String
  cep              String
  accountable      String
  createdAt        DateTime           @default(now())
  updateAt         DateTime?
  user             User               @relation(fields: [id], references: [id])
  Client_Company   Client_Company[]
  RevenuePerClient RevenuePerClient[]
}

model Person {
  id        String    @id
  name      String
  fone      String?
  address   String
  cep       String
  createdAt DateTime  @default(now())
  updateAt  DateTime?
  user      User      @relation(fields: [id], references: [id])
}

model Token {
  id         String    @id @default(uuid())
  user_id    String
  token      String    @default(uuid())
  expires    DateTime
  used       Boolean   @default(false)
  used_in    DateTime?
  created_at DateTime  @default(now())
  updated_t  DateTime?
  user       User      @relation(fields: [user_id], references: [id])
}

enum Unit_of_measurement {
  ml
  l 
  g
  kg
}

model Ingredients {
  id                   String                 @id @default(uuid())
  description          String                 @unique
  unit_of_measurement  Unit_of_measurement
  value                Float
  amount_actual        Int?
  created_at           DateTime               @default(now())
  updated_t            DateTime?
  ingredients_Revenues Ingredients_Revenues[]
  Ingredient_control   Ingredient_control[]
}

model Ingredient_control {
  id            Int         @id @default(autoincrement())
  fk_ingredient String
  created_at    DateTime    @default(now())
  is_output     Boolean
  unitary_value Float?
  amount        Int
  ingredients   Ingredients @relation(fields: [fk_ingredient], references: [id])
}

model Ingredients_Revenues {
  fk_ingredient     String
  fk_revenues       String
  amount_ingredient Int
  ingredients       Ingredients @relation(fields: [fk_ingredient], references: [id])
  revenues          Revenues    @relation(fields: [fk_revenues], references: [id])

  @@id([fk_ingredient, fk_revenues])
}

model Revenues {
  id                   String                 @id @default(uuid())
  description          String                 @unique
  value                Float
  yield_per_quantity   Int?
  time_in_hours        Int?
  base_max_amount      Int
  base_min_amount      Int
  presumed_profit      Float?
  imagem               String?
  created_at           DateTime               @default(now())
  updated_t            DateTime?
  status               Int
  is_enabled           Boolean                @default(true)
  ingredients_Revenues Ingredients_Revenues[]
  // recipe_steps         Recipe_steps[]
  ItemMenu             ItemMenu[]
  OrderItem            OrderItem[]
  RevenuePerClient     RevenuePerClient[]
}

model Company {
  id             String           @id @default(uuid())
  corporate_name String
  cnpj           String           @unique
  email          String           @unique
  fone           String
  county         String?
  district       String?
  uf             String?
  address        String
  cep            String
  createdAt      DateTime         @default(now())
  updateAt       DateTime?
  Client_Company Client_Company[]
}

model Client_Company {
  fk_company  String
  fk_client   String
  fone        String   @unique
  accountable String
  createdAt   DateTime @default(now())
  clients     Client   @relation(fields: [fk_client], references: [id])
  company     Company  @relation(fields: [fk_company], references: [id])

  @@id([fk_client, fk_company])
}

model Menu {
  id         String     @id @default(uuid())
  is_enabled Boolean    @default(true)
  dateMenu   DateTime
  itemMenu   ItemMenu[]
}

model ItemMenu {
  fk_revenues              String
  fk_menu                  String
  max_amount               Int?
  min_amount               Int?
  revenue_value_on_the_day Float
  menu                     Menu     @relation(fields: [fk_menu], references: [id])
  revenues                 Revenues @relation(fields: [fk_revenues], references: [id])

  @@id([fk_revenues, fk_menu])
}

model CategoryOrderItem {
  id          String      @id @default(uuid())
  description String
  OrderItem   OrderItem[]
}

model Order {
  id             String          @id @default(uuid())
  numberOrder    Int             @unique() @default(autoincrement())
  dateOrder      DateTime        @default(now())
  valueOrder     Float
  fk_orderstatus String
  fk_user        String
  user           User            @relation(fields: [fk_user], references: [id])
  orderStatus    OrderStatus     @relation(fields: [fk_orderstatus], references: [id])
  orderItem      OrderItem[]
  OrderBatchItem OrderBatchItem?
}

model OrderStatus {
  id          String  @id @default(uuid())
  description String
  order       Order[]
}

model OrderItem {
  fk_order             String
  fk_revenue           String
  fk_categoryOrderItem String
  valueOrderItem       Float
  of_menu              Boolean
  homologate           Homologate?       @default(EM_HOMOLOGACAO)
  dateOrderItem        DateTime          @default(now())
  amountItem           Int
  categoryOrderItem    CategoryOrderItem @relation(fields: [fk_categoryOrderItem], references: [id])
  order                Order             @relation(fields: [fk_order], references: [id])
  revenues             Revenues          @relation(fields: [fk_revenue], references: [id])

  @@id([fk_revenue, fk_order, fk_categoryOrderItem])
}

enum Homologate {
  EM_HOMOLOGACAO
  APROVADO
  REPROVADO
}

model RevenuePerClient {
  fk_revenue   String
  fk_client    String
  unique_value Float
  client       Client   @relation(fields: [fk_client], references: [id])
  revenues     Revenues @relation(fields: [fk_revenue], references: [id])

  @@id([fk_revenue, fk_client])
}

model OrderBatch {
  id               String           @id @default(uuid())
  invoice_file     String
  invoice_number   String
  numberOrderBatch Int              @default(autoincrement())
  fk_client        String
  user             User             @relation(fields: [fk_client], references: [id])
  OrderBatchItem   OrderBatchItem[]
}

model OrderBatchItem {
  fk_order      String     @id
  fk_orderBatch String
  order         Order      @relation(fields: [fk_order], references: [id])
  orderBatch    OrderBatch @relation(fields: [fk_orderBatch], references: [id])
}
