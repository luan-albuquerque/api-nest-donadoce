// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  password   String
  email      String    @unique
  is_enabled Boolean   @default(true)
  is_admin   Boolean   @default(false)
  is_client  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updateAt   DateTime?
  token      Token[]
  Clients    Client?
  Person     Person?
}

model Client {
  id             String           @id
  corporate_name String
  name_fantasy   String
  cnpj           String           @unique
  county         String?
  district       String?
  ie             String?
  uf             String?
  fone           String?
  address        String
  cep            String
  accountable    String
  createdAt      DateTime         @default(now())
  updateAt       DateTime?
  user           User             @relation(fields: [id], references: [id])
  Client_Company Client_Company[]
}

model Person {
  id        String    @id
  name      String
  fone      String?
  address   String
  cep       String
  createdAt DateTime  @default(now())
  updateAt  DateTime?
  user      User      @relation(fields: [id], references: [id])
}

model Token {
  id         String    @id @default(uuid())
  user_id    String
  token      String    @default(uuid())
  expires    DateTime
  used       Boolean   @default(false)
  used_in    DateTime?
  created_at DateTime  @default(now())
  updated_t  DateTime?
  user       User      @relation(fields: [user_id], references: [id])
}

model Ingredients {
  id                   String                 @id @default(uuid())
  description          String                 @unique
  value                Float
  amount_actual        Int?
  created_at           DateTime               @default(now())
  updated_t            DateTime?
  ingredients_Revenues Ingredients_Revenues[]
  Ingredient_control   Ingredient_control[]
}

model Ingredient_control {
  id            Int         @id @default(autoincrement())
  fk_ingredient String
  created_at    DateTime    @default(now())
  is_output     Boolean
  unitary_value Float?
  amount        Int
  ingredients   Ingredients @relation(fields: [fk_ingredient], references: [id])
}

model Ingredients_Revenues {
  fk_ingredient     String
  fk_revenues       String
  amount_ingredient Int
  ingredients       Ingredients @relation(fields: [fk_ingredient], references: [id])
  revenues          Revenues    @relation(fields: [fk_revenues], references: [id])

  @@id([fk_ingredient, fk_revenues])
}

model Revenues {
  id                   String                 @id @default(uuid())
  description          String                 @unique
  value                Float
  yield_per_quantity   Int?
  time_in_hours        Int?
  presumed_profit      Float?
  imagem               String?
  created_at           DateTime               @default(now())
  updated_t            DateTime?
  ingredients_Revenues Ingredients_Revenues[]
  // recipe_steps         Recipe_steps[]
}

// Removido 
// model Recipe_steps {
//   id          String   @id @default(uuid())
//   text        String
//   fk_revenues String
//   revenues    Revenues @relation(fields: [fk_revenues], references: [id])
// }

model Company {
  id             String           @id
  corporate_name String
  cnpj           String           @unique
  county         String?
  district       String?
  ie             String?
  uf             String?
  address        String
  cep            String
  createdAt      DateTime         @default(now())
  updateAt       DateTime?
  Client_Company Client_Company[]
}

model Client_Company {
  fk_company  String
  fk_client   String
  fone        String
  accountable String
  clients     Client  @relation(fields: [fk_client], references: [id])
  company     Company @relation(fields: [fk_company], references: [id])

  @@id([fk_client, fk_company])
}
