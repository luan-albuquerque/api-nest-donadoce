// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Unit_of_measurement {
  ml
  l
  g
  kg
  u
}

enum Order_type {
  programmed
  coffe
}

enum Method_of_preparation {
  roast
  frozen
}

enum Homologate {
  EM_HOMOLOGACAO
  APROVADO
  REPROVADO
}

model User {
  id                           String          @id @default(uuid())
  password                     String
  email                        String          @unique
  is_enabled                   Boolean         @default(true)
  is_admin                     Boolean         @default(false)
  is_client                    Boolean         @default(false)
  is_company                   Boolean         @default(false)
  is_driver                    Boolean         @default(false)
  is_production                Boolean         @default(false)
  createdAt                    DateTime        @default(now())
  updateAt                     DateTime?
  token                        Token[]
  Clients                      Client?
  Person                       Person?
  Client_Company               Client_Company?
  Order                        Order[]
  OrderBatchUserOpenOrderBatch OrderBatch[]    @relation(name: "userOpenOrderBatch")
  OrderBatchClient             OrderBatch[]    @relation(name: "userClient")
}

model Client {
  id               String             @id @default(uuid())
  corporate_name   String
  name_fantasy     String
  cnpj             String
  county           String?
  district         String?
  ie               String
  uf               String?
  fone             String?            
  address          String
  cep              String
  accountable      String
  createdAt        DateTime           @default(now())
  updateAt         DateTime?
  user             User               @relation(fields: [id], references: [id])
  Client_Company   Client_Company[]
  RevenuePerClient RevenuePerClient[]
}

model Person {
  id        String    @id
  name      String
  fone      String?
  address   String
  cep       String
  createdAt DateTime  @default(now())
  updateAt  DateTime?
  user      User      @relation(fields: [id], references: [id])
}

model Token {
  id         String    @id @default(uuid())
  user_id    String
  token      String    @default(uuid())
  expires    DateTime
  used       Boolean   @default(false)
  used_in    DateTime?
  created_at DateTime  @default(now())
  updated_t  DateTime?
  user       User      @relation(fields: [user_id], references: [id])
}

model Ingredients {
  id                   String                 @id @default(uuid())
  description          String                 @unique
  unit_of_measurement  Unit_of_measurement
  value                Float
  amount               Int
  value_per_serving    Float
  amount_actual        Int?
  created_at           DateTime               @default(now())
  updated_t            DateTime?
  ingredients_Revenues Ingredients_Revenues[]
  Ingredient_control   Ingredient_control[]
}

model Ingredient_control {
  id                  Int                  @id @default(autoincrement())
  fk_ingredient       String
  unit_of_measurement Unit_of_measurement?
  created_at          DateTime             @default(now())
  is_output           Boolean
  unitary_value       Float?
  amount              Float
  ingredients         Ingredients          @relation(fields: [fk_ingredient], references: [id])
}

model Ingredients_Revenues {
  fk_ingredient       String
  fk_revenues         String
  unit_of_measurement Unit_of_measurement?
  amount_ingredient   Float
  ingredients         Ingredients          @relation(fields: [fk_ingredient], references: [id])
  revenues            Revenues             @relation(fields: [fk_revenues], references: [id])

  @@id([fk_ingredient, fk_revenues])
}

model Revenues {
  id                       String                 @id @default(uuid())
  description              String                 @unique
  value                    Float
  value_defined_by_revenue Float?
  yield_per_quantity       Int?
  time_in_hours            Int?
  base_max_amount          Float
  base_min_amount          Float
  presumed_profit          Float?
  imagem                   String?
  created_at               DateTime               @default(now())
  updated_t                DateTime?
  status                   Int
  order_type               Order_type? // Tipo de pedido -> Programado e Coffe
  is_enabled               Boolean                @default(true)
  ingredients_Revenues     Ingredients_Revenues[]
  // recipe_steps         Recipe_steps[]
  ItemMenu                 ItemMenu[]
  OrderItem                OrderItem[]
  RevenuePerClient         RevenuePerClient[]
}

model Company {
  id             String           @id @default(uuid())
  priority       Int
  corporate_name String
  cnpj           String
  county         String?
  district       String?
  uf             String?
  address        String
  cep            String
  createdAt      DateTime         @default(now())
  updateAt       DateTime?
  Client_Company Client_Company[]
  Order          Order[]
}

model Client_Company {
  fk_company  String
  fk_client   String
  fone        String   
  accountable String
  fk_user     String?  @unique
  createdAt   DateTime @default(now())
  clients     Client   @relation(fields: [fk_client], references: [id])
  company     Company  @relation(fields: [fk_company], references: [id])
  user        User?    @relation(fields: [fk_user], references: [id])

  @@id([fk_client, fk_company])
}

model Menu {
  id         String     @id @default(uuid())
  is_enabled Boolean    @default(true)
  dateMenu   DateTime
  itemMenu   ItemMenu[]
}

model ItemMenu {
  fk_revenues              String
  fk_menu                  String
  max_amount               Int?
  min_amount               Int?
  revenue_value_on_the_day Float
  menu                     Menu     @relation(fields: [fk_menu], references: [id])
  revenues                 Revenues @relation(fields: [fk_revenues], references: [id])

  @@id([fk_revenues, fk_menu])
}

model CategoryOrderItem {
  id          String      @id @default(uuid())
  description String
  order_type  Order_type?
  time        DateTime?   @db.Time()
  OrderItem   OrderItem[]
}

model Order {
  id                    String          @id @default(uuid())
  numberOrder           Int             @unique() @default(autoincrement())
  dateOrder             DateTime        @default(now())
  valueOrder            Float
  order_type            Order_type? // Tipo de pedido -> Programado e Coffe
  amount_of_tray        Int?
  amount_of_boxes       Int?
  comment_by_client     String?
  file_caution          String?
  file_invoice          String?
  invoice_number        String?
  file_payment_voucher  String?
  fk_orderstatus        String
  fk_user               String
  fk_company            String?
  is_created_by_company Boolean?        @default(false)
  user                  User            @relation(fields: [fk_user], references: [id])
  company               Company?        @relation(fields: [fk_company], references: [id])
  orderStatus           OrderStatus     @relation(fields: [fk_orderstatus], references: [id])
  orderItem             OrderItem[]
  orderBatchItem        OrderBatchItem?
}

model OrderStatus {
  id          String  @id @default(uuid())
  description String
  order       Order[]
}

model OrderItem {
  fk_order              String
  fk_revenue            String
  fk_categoryOrderItem  String // Status 
  valueOrderItem        Float //Valor da receita ou alterada
  of_menu               Boolean // Se esse item pertence algum Menu
  comment               String?               @db.Text
  method_of_preparation Method_of_preparation // METODO DE PREPARO -> COFFE OU PROGRAMADO
  delivery_date         DateTime
  homologate            Homologate?           @default(EM_HOMOLOGACAO) // STATUS DE ITEM DE PEDIDOS (obs: Fora de Menu é EM_HOMO)
  dateOrderItem         DateTime              @default(now()) // Data de Solicitação
  amountItem            Int // Quantidade de Receita ( Item Ex: Coxinha de frango)
  //Relacionamento
  categoryOrderItem     CategoryOrderItem     @relation(fields: [fk_categoryOrderItem], references: [id])
  order                 Order                 @relation(fields: [fk_order], references: [id])
  revenues              Revenues              @relation(fields: [fk_revenue], references: [id])

  @@id([fk_revenue, fk_order, fk_categoryOrderItem])
}

model RevenuePerClient {
  fk_revenue   String
  fk_client    String
  unique_value Float
  client       Client   @relation(fields: [fk_client], references: [id])
  revenues     Revenues @relation(fields: [fk_revenue], references: [id])

  @@id([fk_revenue, fk_client])
}

model OrderBatch {
  id                      String           @id @default(uuid())
  file_invoice            String
  file_payment_voucher    String?
  invoice_number          String?
  numberOrderBatch        Int              @default(autoincrement())
  fk_client               String  // Client ou company
  fk_user_open_orderbatch String
  user                    User             @relation(name: "userClient", fields: [fk_client], references: [id])
  userBatch               User             @relation(name: "userOpenOrderBatch", fields: [fk_user_open_orderbatch], references: [id])
  OrderBatchItem          OrderBatchItem[]
}

model OrderBatchItem {
  fk_order      String     @unique
  fk_orderBatch String
  is_removed    Boolean    @default(false)
  created_at    DateTime   @default(now())
  deleted_at    DateTime?
  order         Order      @relation(fields: [fk_order], references: [id])
  orderBatch    OrderBatch @relation(fields: [fk_orderBatch], references: [id])

  @@id([fk_order, fk_orderBatch])
}

model ControlProductionProduct {
  id                   String     @id @default(uuid())
  seq                  Int
  fk_revenue           String
  description          String
  fk_categoryOrderItem String
  description_category String
  delivery_date        DateTime
  order_type           Order_type
  amount_actual        Int
}

model ControlProductionClient {
  id                   String     @id @default(uuid())
  seq                  Int
  fk_user              String
  corporate_name       String
  company_name         String?
  fk_company           String?
  fk_revenue           String
  description          String
  fk_categoryOrderItem String
  description_category String
  delivery_date        DateTime
  order_type           Order_type
  amount_actual        Int
}
